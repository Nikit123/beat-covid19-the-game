{"version":3,"sources":["content/covid.svg","content/globe.png","content/moving_covid.png","content/lab.png","gameplay/CovidCell.js","gameplay/GameArea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CovidCell","props","bounce","cell","state","cellDetails","vectorX","vectorY","setState","updateCell","x","y","generateCell","widthMin","Math","ceil","heightMin","document","getElementsByClassName","clientHeight","widthMax","floor","clientWidth","heightMax","random","isCollideWithEarth","b","offsetLeft","offsetTop","componentDidMount","componentDidUpdate","playArea","increaseInfection","window","requestAnimationFrame","this","src","moving_covid","className","id","idProp","onMouseOver","style","left","toString","top","Component","GameArea","covidCells","gameStart","welcomeModal","noEscapeModal","vaccineProgress","vaccineAvailable","doomsDayCounter","gameOver","createCorona","i","push","updateVaccineProgress","progress","infection","startGame","Modal","aria-labelledby","centered","show","Header","Title","Body","Footer","Button","variant","onClick","location","reload","color","globe","height","alt","lab","App","marginTop","covid","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46f5b6fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.2c352da4.svg\";","module.exports = __webpack_public_path__ + \"static/media/globe.5bde68a7.png\";","module.exports = __webpack_public_path__ + \"static/media/moving_covid.ab4c37e8.png\";","module.exports = __webpack_public_path__ + \"static/media/lab.3b693303.png\";","import React, { Component } from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport moving_covid from '../content/moving_covid.png';\r\n\r\nexport default class CovidCell extends Component {\r\n\r\n    static propTypes = {\r\n        increaseInfection: Proptypes.func\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cellDetails: {\r\n                x: 0,\r\n                y: 0,\r\n                vectorX: 0,\r\n                vectorY: 0\r\n            }\r\n        }\r\n    }\r\n\r\n    bounce = () => {\r\n        var cell = this.state.cellDetails;\r\n        cell.vectorX = -cell.vectorX;\r\n        cell.vectorY = -cell.vectorY;\r\n        this.setState({ cellDetails: cell });\r\n    }\r\n\r\n    updateCell = () => {\r\n        var cell = this.state.cellDetails;\r\n        cell.x = cell.x + cell.vectorX;\r\n        cell.y = cell.y + cell.vectorY;\r\n        if (!(cell.vectorX == 0 && cell.vectorY == 0))\r\n            this.setState({ cellDetails: cell });\r\n    }\r\n\r\n    generateCell = () => {\r\n        var widthMin = Math.ceil(0);\r\n        var heightMin = Math.ceil(document.getElementsByClassName('Header')[0].clientHeight);\r\n        var widthMax = Math.floor(document.getElementsByClassName('Game-body')[0].clientWidth);\r\n        var heightMax = Math.floor(document.getElementsByClassName('Game-body')[0].clientHeight);\r\n        var xCord = Math.floor(Math.random() * (widthMax - widthMin + 1) + widthMin);\r\n        var yCord = Math.floor(Math.random() * (heightMax - heightMin + 1) + heightMin);\r\n        var dirX = Math.floor(Math.random() * 2) == 0 ? -1 : 1;\r\n        var dirY = Math.floor(Math.random() * 2) == 0 ? -1 : 1;\r\n        var cell = {\r\n            x: xCord,\r\n            y: yCord,\r\n            vectorX: dirX,\r\n            vectorY: dirY\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    isCollideWithEarth = (cell) => {\r\n        var b = document.getElementsByClassName('Earth')[0];\r\n        return !(\r\n            (cell.x < (b.offsetLeft - (b.clientWidth / 2))) ||\r\n            (cell.y < (b.offsetTop - (b.clientHeight / 2))) ||\r\n            (cell.x > (b.offsetLeft + (b.clientWidth / 2))) ||\r\n            (cell.y > (b.offsetTop + (b.clientHeight / 2)))\r\n        );\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        var cell = this.generateCell();\r\n        this.setState({ cellDetails: cell });\r\n    }\r\n\r\n\r\n    componentDidUpdate = () => {\r\n        var playArea = document.getElementsByClassName('Game-body')[0];\r\n        var cell = this.state.cellDetails;\r\n        if (this.isCollideWithEarth(cell)) {\r\n            cell.vectorX = 0;\r\n            cell.vectorY = 0;\r\n            this.props.increaseInfection();\r\n        }\r\n        else {\r\n            if (cell.x < 0 && cell.vectorX != 1)\r\n                cell.vectorX = 1;\r\n            if (cell.x > playArea.clientWidth && cell.vectorX != -1)\r\n                cell.vectorX = -1;\r\n            if (cell.y < document.getElementsByClassName('Header')[0].clientHeight && cell.vectorY != 1)\r\n                cell.vectorY = 1;\r\n            if (cell.y > playArea.clientHeight && cell.vectorY != -1)\r\n                cell.vectorY = -1;\r\n        }\r\n        if (cell != this.state.cellDetails)\r\n            this.setState({ cellDetails: cell });\r\n        window.requestAnimationFrame(this.updateCell);\r\n    }\r\n\r\n    render() {\r\n        var cell = this.state.cellDetails;\r\n        return <img\r\n            src={moving_covid}\r\n            className=\"Cell\"\r\n            id={this.props.idProp}\r\n            onMouseOver={() => { this.bounce(); }}\r\n            style={{ left: cell.x.toString() + \"px\", top: cell.y.toString() + \"px\" }} />\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport globe from '../content/globe.png';\r\nimport CovidCell from './CovidCell.js';\r\nimport lab from '../content/lab.png';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class GameArea extends Component {\r\n\r\n    state = {\r\n        covidCells: [],\r\n        gameStart: false,\r\n        welcomeModal: false,\r\n        noEscapeModal: false,\r\n        vaccineProgress: 0,\r\n        vaccineAvailable: false,\r\n        doomsDayCounter: 0,\r\n        gameOver: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ welcomeModal: true });\r\n    }\r\n\r\n    createCorona = () => {\r\n        var covidCells = [];\r\n        for (var i = 0; i < 10; i++) {\r\n            covidCells.push(<CovidCell\r\n                idProp={i.toString()}\r\n                increaseInfection={this.increaseInfection}\r\n            />);\r\n        }\r\n        this.setState({ covidCells });\r\n    }\r\n\r\n    updateVaccineProgress = () => {\r\n        var progress = this.state.vaccineProgress;\r\n        progress += 2;\r\n        this.setState({ vaccineProgress: progress });\r\n        if (progress >= 100) {\r\n            this.setState({ vaccineAvailable: true });\r\n        }\r\n    }\r\n\r\n    increaseInfection = () => {\r\n        var infection = this.state.doomsDayCounter;\r\n        if (infection < 3)\r\n            infection++;\r\n        if (infection >= 3)\r\n            this.setState({ gameOver: true })\r\n        this.setState({ doomsDayCounter: infection });\r\n    }\r\n\r\n    startGame = () => {\r\n        this.setState({ welcomeModal: false });\r\n        this.createCorona();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.welcomeModal &&\r\n                    <Modal\r\n                        aria-labelledby=\"contained-modal-title-vcenter\"\r\n                        centered\r\n                        show={this.state.welcomeModal}>\r\n                        <Modal.Header >\r\n                            <Modal.Title>Beat Covid-19 (The Game)</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            Welcome!\r\n                            This is a simple mini game, where you are a doctor/scientist who tries to protect Earth from deadly covid-19 virus while trying to develop a vaccine at the same time.\r\n                            Defend Earth by bouncing back covid virus cells, also try to visit the lab and research vaccine by clicking. Try to develop vaccine before 3 cells infect earth.\r\n                            The fate of human race is in your hands!\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={() => { this.setState({ noEscapeModal: true }); }}>\r\n                                Maybe later?\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={() => { this.startGame(); }}>Save the World!</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n                {this.state.noEscapeModal &&\r\n                    <Modal show={this.state.noEscapeModal}>\r\n                        <Modal.Header >\r\n                            <Modal.Title>Are you kidding?</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            We understand you clicked that button by mistake. Get back now.\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"primary\" onClick={() => { this.setState({ noEscapeModal: false }) }}>Sorry, take me back.</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n                {!this.state.vaccineAvailable ? this.state.covidCells :\r\n                    <Modal show={this.state.vaccineAvailable}>\r\n                        <Modal.Header >\r\n                            <Modal.Title>We did it!</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            You managed to develop a vaccine in time. Humanity is saved!\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"primary\" onClick={() => { window.location.reload(); }}>Wohoo!</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n                {this.state.gameOver &&\r\n                    <Modal show={this.state.gameOver}>\r\n                        <Modal.Header >\r\n                            <Modal.Title>Oops!</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            Earth has been devastated by Covid-19.\r\n                        </Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"primary\" onClick={() => { window.location.reload(); }} > Please, let me start again.</Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                }\r\n                <figure className=\"Earth\">\r\n                    <figcaption style={{ color: \"cornflowerblue\" }}>Lives left : {3 - this.state.doomsDayCounter}</figcaption>\r\n                    <img src={globe} style={{ height: \"15vmin\" }} alt=\"Earth\" />\r\n                </figure>\r\n                <figure className=\"Lab\">\r\n                    <figcaption style={{ color: \"cornflowerblue\" }}>Vaccine progress : {this.state.vaccineProgress} % </figcaption>\r\n                    <img src={lab} alt=\"Lab\" style={{ height: \"25vmin\" }} onClick={() => { this.updateVaccineProgress() }} />\r\n                </figure>\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport covid from './content/covid.svg';\r\nimport GameArea from './gameplay/GameArea.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"Header\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-4\" style={{ marginTop: \"1%\" }}>\r\n            <img src={covid} className=\"Header-logo\" alt=\"covid\" />\r\n          </div>\r\n          <div className=\"col-sm-4\" style={{ color: \"cadetblue\", marginTop: \"1%\" }}><h1>Beat COVID-19 (The Game)</h1></div>\r\n          <div className=\"col-sm-4\" style={{ marginTop: \"1%\" }}>\r\n            <img src={covid} className=\"Header-logo\" alt=\"covid\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"Game-body\" >\r\n        <GameArea />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}